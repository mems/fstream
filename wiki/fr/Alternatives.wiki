#summary Solutions alternatives permettant d'utiliser une police dans Flash

= Polices système =

Méthode la plus simple, la plus exigeante en terme d'utilisation. Elle permet d'utiliser la police installé sur le poste de l'utilisateur, mais ne permet pas d'utiliser des effets graphiques ou de transformation (blend modes, filters, rotation, scale, etc.).

Avantages :
	* La solution la plus simple et la plus légère qui existe
Inconvénients :
	* Ne fonctionne qu'avec les polices installées sur le poste de l'utilisateur
	* Les effets ne fonctionnent pas avec les `flash.text.TextField`, sauf si on les rastérise (`BitmapData`)

= Embarquer la police =

Méthode primitive, mais utile dans les cas où l'on a besoin d'embarquer quelques police en Latin1 ou justes quelques caractères.

Avantages :
	* Simple à mettre en place quand il y a peu de polices
Inconvénients :
	* Augmentation du poids des données à charger en fonction du nombre de police, de leurs complexité et du nombre de caractères embarqués
	* Peut devenir très lourd avec des polices Unicode

	* [EmbedFont Méthodes d'intégration d'une police dans un SWF]

= Bibliothèque externe =

Il existe 2 types de bibliothèque externe : la bibliothèque de partage à l'exécution et la bibliothèque chargé dynamiquement. Elles permet d'externaliser un partie de l'application (polices, classes, images, etc.), permettant ainsi d'alléger le binaire principal de l'application.

== Bibliothèque de partage à l'exécution ==

Ce type de bibliothèque est géré nativement par le player Flash qui par l'intermédiaire d'un tag SWF `ImportAsset2` connais l'emplacement et les élements à récuperer de la bibliothèque externe.
Cette fonctionnalité est accessible au niveau de la partie _Partage_ de la fenêtre propriétés d'éléments de bibiliothèque de Flash Professional.
Le fichier externe doit comporter le tag SWF `ExportAssets` pour indiquer quelques sont les éléments importables.

Avantages :
	* Peux être facilement utilisée en commun sur plusieurs projets
Inconvénients :
	* Peut devenir très lourd à charger avec des polices Unicode
	* Impossible de changer l'emplacement de la bibliothèque ou du SWF principale, sans devoir recompiler
	* Impossible de connaitre la progression du chargement

	* [http://help.adobe.com/fr_FR/flash/cs/using/WSd60f23110762d6b883b18f10cb1fe1af6-7dc9a.html Partage des actifs de bibliothèque]
	* [http://swfmill.org/doc/using-swfmill.html#shared swfmill - Using shared libraries]
	* [http://jeanphiblog.media-box.net/dotclear/index.php?2009/06/18/323-flash-cs4-bibliotheque-partagee-shared-library-en-as3 Bibliothèque partagée (Shared Library) en AS3]

== Bibliothèque chargée dynamiquement ==

Même méthode que la précédente, mais cette fois ci l'emplacement de la bibliothèque n'est pas fixé à l'avance et n'est pas géré de façon native. Ce qui permet en fonction de certains variables (localisation, version du player, geolocalisation, etc.) de charger une bibliothèque plutôt qu'une autre.

	# charger la bibliothèque avec `loaderInstance.load(urlRequestInstance);`
	# une fois la bibliothèque complètement chargé, déclarer la police `Font.registerFont(loaderInstance.contentLoaderInfo.applicationDomain.getDefinition("fontClassName") as Class);`

Avantages :
	* Peux être facilement utilisée en commun sur plusieurs projets
Inconvénients :
	* Nécessite de gérer le chargement de ces SWF externes et de leur contenu
	* Peut devenir très lourd à charger avec des polices Unicode
	* Nécéssite que la police soit lié à une classe ActionScript (via le SWF tag `SymbolClass`)

	* [http://help.adobe.com/fr_FR/FlashPlatform/reference/actionscript/3/flash/display/Loader.html flash.display.Loader]
	* [http://help.adobe.com/fr_FR/FlashPlatform/reference/actionscript/3/flash/text/Font.html flash.display.Font]
	* [http://www.bit-101.com/blog/?p=946 Preloaders in AS3]

== Les SWF signés ==

_Depuis FlashPlayer 9.0.115.0_

Il est possible de signer les SWF (`*.swz`). Ce qui permet de profiter d'un cache persistant crossdomain du FlashPlayer pour accélérer les chargements de bibliothèque.
Une fois ce SWF chargé, celui-ci reste _Ad vitam æternam_ stocké sur le poste client sous un identifiant unique qui lui permet d'être utilisé par plusieurs domaines différents (qui doivent tous disposer de l'original).

{{{
var requestInstance:URLRequest = new URLRequest("repository location of SWZ file");
requestInstance.hash = "SHA-256 key";//Quelque soit l'emplacement du fichier, c'est le hash qui permet de l'identifier et de le rapatrier depuis le cache, dans le cas échant depuis l'URL fournie
urlLoaderInstance.load(requestInstance);//le chargement d'un SWZ ne fonctionne qu'avec un URLLoader

[…]//Un fois que le fichier est chargé complètement 

var loaderInstance:Loader = new Loader();
loaderInstance.load(urlLoaderInstance.data);//charge le contenu du SWF signé
}}}

_Note : Adobe appelle ces SWF signé des RSL (Runtime Shared Library)_

_Note 2 : Il semble d'après un commentaire dans la [http://opensource.adobe.com/svn/opensource/flex/sdk/trunk/modules/swfutils/src/java/flash/swf/TagValues.java source de TagValues.java du Flex SDK] que le SWF Tag `ImportAsset2` supporte aussi les hash "SHA-1" de fichiers SWZ_

	* [http://help.adobe.com/fr_FR/FlashPlatform/reference/actionscript/3/flash/net/URLRequest.html#digest flash.net.URLRequest.digest]
	* [http://help.adobe.com/fr_FR/FlashPlatform/reference/actionscript/3/fl/rsl/package-detail.html fl.rsl package]
	* [http://www.adobe.com/devnet/flex/articles/flash_player_cache.html Improving Flex application performance using the Flash Player cache]

== Génération dynamique de SWF ==

_Cette solution, au niveau serveur peux être utilisé pour !FontStream_

Il est possible coté server de générer à la volé un SWF par l'intermédiaire d'un [http://fr.wikipedia.org/wiki/Common_Gateway_Interface CGI] (Flex pour Apache, swfmill, etc.), un SWF contenant uniquement un champ texte statique et les caractères de polices qu'il a besoin.

Coté client, un simple appel HTTP, permet de récupère celui ci et de l'afficher :
{{{
displayObjectContainerInstance.addChild(loaderInstance);//ajoute le loader à la display liste
loaderInstance.load(urlRequestInstance);//lance le chargement
}}}

Avantages :
	* Très simple à mettre en place coté client
	* Données transmises de petite taille
Inconvénients :
	* Passe par une conversion de format : du TTF vers le SWF (temps de calculs et accès disques)
	* Permet de façon limitié l'utilisation des champs texte dynamique, ni de cumuler les ressources déjà chargées ^1^
	* Une certaine complexité de la mise en place de la partie server (impossible sur certains serveurs)
	* Nécessite une bonne maitrise des ressources inutilisés coté client (`loaderInstance.unloadAndStop()`) ^1^
	
	 " _Si, pour !FontStream, cette solution est retenue pour la partie serveur, ces inconvéniants disparaissent_