#summary Alternative solutions to use a font in Flash

= System font =

Méthode la plus simple, la plus exigeante en terme d'utilisation. Elle permet d'utiliser la police installé sur le poste de l'utilisateur, mais ne permet pas d'utiliser des effets graphiques ou de transformation (blend modes, filters, rotation, scale, etc.).

Pro :
	* Simplest and lightest
Con :
	* Work only with installed fonts on device
	* Some effects not work with `flash.text.TextField`, only if there are rasterized (`BitmapData`)

= Embed a font =

Méthode primitive, mais utile dans les cas où l'on a besoin d'embarquer quelques police en Latin1 ou justes quelques caractères.

Advantages :
	* Simple only for few fonts
Disadvantages :
	* Add weight needed to be loaded, depends number of fonts, there complexity and number of embedded chars
	* Could have heavy for Unicode fonts

	* [EmbedFont Embed a font in a SWF]

= External libraries =

Il existe 2 types de bibliothèque externe : la bibliothèque de partage à l'exécution et la bibliothèque chargé dynamiquement. Elles permet d'externaliser un partie de l'application (polices, classes, images, etc.), permettant ainsi d'alléger le binaire principal de l'application.

== Shared Library ==

Ce type de bibliothèque est géré nativement par le player Flash qui par l'intermédiaire d'un tag SWF `ImportAsset2` connais l'emplacement et les élements à récuperer de la bibliothèque externe.
Pour utiliser cette fonctionnalité, il faut utiliser dans Flash Professional, dans la fenêtre propriétés d'éléments de bibiliothèque, la partie _Partage_.
Le fichier externe doit comporter le tag SWF `ExportAssets` pour indiquer quelques sont les éléments importables.

Advantages :
	* Could be used in common for multiple projects
Disadvantages :
	* Could have heavy for Unicode fonts
	* Couldn't change location (library and/or main SWF) without need to recompile

	* [http://help.adobe.com/en_US/flash/cs/using/WSd60f23110762d6b883b18f10cb1fe1af6-7dc9a.html Sharing library assets]
	* [http://swfmill.org/doc/using-swfmill.html#shared swfmill - Using shared libraries]
	* [http://jeanphiblog.media-box.net/dotclear/index.php?2009/06/18/323-flash-cs4-bibliotheque-partagee-shared-library-en-as3 Bibliothèque partagée (Shared Library) en AS3]

== Bibliothèque chargée dynamiquement ==

Même méthode que la précédente, mais cette fois ci l'emplacement de la bibliothèque n'est pas fixé à l'avance et n'est pas géré de façon native. Ce qui permet en fonction de certains variables (localisation, version du player, geolocalisation, etc.) de charger une bibliothèque plutôt qu'une autre.

	# charger la bibliothèque avec `loaderInstance.load(urlRequestInstance);`
	# une fois la bibliothèque complètement chargé, déclarer la police `Font.registerFont(loaderInstance.contentLoaderInfo.applicationDomain.getDefinition("fontClassName") as Class);`

Advantages :
	* Could be used in common for multiple projects
Disadvantages :
	* Need handling load of external SWF and its content
	* Could have heavy for Unicode fonts
	* Need to link font to an ActionScript class (with the SWF tag `SymbolClass`)

	* [http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/display/Loader.html flash.display.Loader]
	* [http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/text/Font.html flash.display.Font]
	* [http://www.bit-101.com/blog/?p=946 Preloaders in AS3]

== Signed SWF ==

_Since FlashPlayer 9.0.115.0_

Il est possible de signer les SWF (`*.swz`). Ce qui permet de profiter d'un cache persistant crossdomain du FlashPlayer pour accélérer les chargements de bibliothèque.
Une fois ce SWF chargé, celui-ci reste _Ad vitam æternam_ stocké sur le poste client sous un identifiant unique qui lui permet d'être utilisé par plusieurs domaines différents (qui doivent tous disposer de l'original).

{{{
var requestInstance:URLRequest = new URLRequest("repository location of SWZ file");
requestInstance.hash = "SHA-256 key";//Quelque soit l'emplacement du fichier, c'est le hash qui permet de l'identifier et de le rapatrier depuis le cache, dans le cas échant depuis l'URL fournie
urlLoaderInstance.load(requestInstance);//le chargement d'un SWZ ne fonctionne qu'avec un URLLoader

[…]//Un fois que le fichier est chargé complètement 

var loaderInstance:Loader = new Loader();
loaderInstance.load(urlLoaderInstance.data);//charge le contenu du SWF signé
}}}

_Note: Adobe call that signed SWF, RSL (Runtime Shared Library)_

_Note 2: Il semble d'après un commentaire dans la [http://opensource.adobe.com/svn/opensource/flex/sdk/trunk/modules/swfutils/src/java/flash/swf/TagValues.java source de TagValues.java du Flex SDK] que le SWF Tag `ImportAsset2` supporte aussi les hash "SHA-1" de fichiers SWZ_

	* [http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/net/URLRequest.html#digest flash.net.URLRequest.digest]
	* [http://help.adobe.com/fr_FR/FlashPlatform/reference/actionscript/3/fl/rsl/package-detail.html fl.rsl package]
	* [http://www.adobe.com/devnet/flex/articles/flash_player_cache.html Improving Flex application performance using the Flash Player cache]

== Dynamic SWF generation ==

_It could be used, server side for !FontStream_

Il est possible coté server de générer à la volé un SWF par l'intermédiaire d'un [http://fr.wikipedia.org/wiki/Common_Gateway_Interface CGI] (Flex pour Apache, swfmill, etc.), un SWF contenant uniquement un champ texte statique et les caractères de polices qu'il a besoin.

Coté client, un simple appel HTTP, permet de récupère celui ci et de l'afficher :
{{{
displayObjectContainerInstance.addChild(loaderInstance);//ajoute le loader à la display liste
loaderInstance.load(urlRequestInstance);//lance le chargement
}}}

Advantages :
	* Simple to handle it, client side
	* Small quantity of data over network
Disadvantages :
	* Disk and CPU usage, convert format (TTF to SWF)
	* Limited usage to dynamic text field, can't handle cumulative resources (successive additions of previous load) ^1^
	* Complex server side setting up (could be impossible with some configuration)
	* Need good practices to handle unused ressources client side (`loaderInstance.unloadAndStop()`) ^1^
	
	# _This disadvantage not exist if for !FontStream, this way is used server side_